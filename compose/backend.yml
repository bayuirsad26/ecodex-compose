# Base configuration for all backend services
x-backend-base: &backend-base
  image: ${BACKEND_IMAGE}
  restart: unless-stopped
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
  env_file:
    - ../config/backend/api.env

# Configuration for services that need database migration
x-backend-migration: &backend-migration
  <<: *backend-base
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }

# Configuration for services that need database to be ready
x-backend-ready: &backend-ready
  <<: *backend-migration
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    seed: { condition: service_completed_successfully }

# Configuration for public-facing services
x-backend-public: &backend-public
  <<: *backend-ready
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    traefik: { condition: service_started }

services:
  # API service with high availability
  api:
    <<: *backend-public
    command: node app/cmd/cmd.js api
    deploy:
      replicas: ${API_REPLICAS}
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      # resources:
      #   limits:
      #     cpus: '2'
      #     memory: 2G
      #   reservations:
      #     cpus: '0.5'
      #     memory: 512M
    environment:
      OTEL_SERVICE_NAME: pfc-api
    labels:
      - traefik.enable=true
      - traefik.http.routers.pfc-api.rule=Host(`${API_DOMAIN}`)
      - traefik.http.routers.pfc-api.entrypoints=websecure
      - traefik.http.services.pfc-api.loadbalancer.server.port=5100
      - traefik.http.routers.pfc-api.tls=true
      - traefik.http.routers.pfc-api.tls.certresolver=letsencrypt
      # Security and rate limiting
      - traefik.http.routers.pfc-api.middlewares=api-ratelimit,api-security,api-cors
      - traefik.http.middlewares.api-ratelimit.ratelimit.average=100
      - traefik.http.middlewares.api-ratelimit.ratelimit.burst=50
      - traefik.http.middlewares.api-ratelimit.ratelimit.period=1m
      # Security headers
      - traefik.http.middlewares.api-security.headers.stsSeconds=31536000
      - traefik.http.middlewares.api-security.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.api-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.api-security.headers.browserXssFilter=true
      - traefik.http.middlewares.api-security.headers.referrerPolicy=strict-origin-when-cross-origin
      # CORS Configuration
      - traefik.http.middlewares.api-cors.headers.accessControlAllowCredentials=true
      - traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,OPTIONS,PUT,POST,DELETE
      - traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=${API_ALLOWED_ORIGINS}
      - traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders=Content-Type,Authorization,X-Requested-With
      - traefik.http.middlewares.api-cors.headers.accessControlMaxAge=86400
      - traefik.http.middlewares.api-cors.headers.addVaryHeader=true

  # Referral service
  referral:
    <<: *backend-ready
    command: node app/cmd/cmd.js referral
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-referral
    labels:
      - traefik.enable=false
